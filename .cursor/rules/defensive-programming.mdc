---
description: 
globs: 
alwaysApply: true
---
# 防御性编程 (Defensive Programming) 设计思想

本规则旨在阐述我们在代码库中应当遵循的防御性编程原则，以确保软件的健壮性和稳定性。

## 核心理念

防御性编程的核心思想是，我们的代码应当能够预见并处理异常情况，而不是假设一切都会正常运行。不信任任何外部输入、依赖或系统状态，并为可能出现的错误做好准备。

## 关键实践

1.  **优雅地处理错误**: 捕获可能发生的异常，记录详细的错误信息，并向用户提供友好的提示，而不是让程序直接崩溃。

2.  **提供备用方案 (Fallback)**: 当正常功能或所需配置缺失时，应提供一个安全的备用选项，以保证核心功能的运行。
    *   **示例**: 在我们的日志系统中，当一个指定的日志通道（channel）找不到时，系统会回退到一个默认的备用通道，而不是直接报错。

3.  **为最坏情况设计"保险丝"**: 考虑到即使是备用方案也可能失败的极端情况，并为此设计最终的保护机制。
    *   **示例**: 我们在 [packages/cosy-logger/src/LogManager.ts](mdc:packages/cosy-logger/src/LogManager.ts) 的 `createFallbackChannel` 方法中实现了这一点。如果连备用的`console`驱动都找不到，系统不会崩溃，而是会打印一条致命错误到控制台，并返回一个静默的"空壳"日志对象。这确保了应用在日志系统完全失效时依然能够存活。

4.  **校验外部输入**: 任何来自用户、API、文件或其他外部来源的数据，在使用前都必须经过严格的校验。

遵循这些原则，可以帮助我们构建出在各种意外情况下都能表现得体、易于维护的可靠软件。
