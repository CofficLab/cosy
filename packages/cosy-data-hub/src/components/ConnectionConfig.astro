---
// ConnectionConfig.astro - 数据库连接配置组件
---

<div class="bg-white rounded-lg shadow-md p-6 mb-6">
  <h2 class="text-xl font-semibold mb-4">数据库连接</h2>
  <div class="flex gap-4 items-end">
    <div class="flex-1">
      <label for="dbPath" class="block text-sm font-medium text-gray-700 mb-2">
        数据库文件路径
      </label>
      <input
        type="text"
        id="dbPath"
        placeholder="例如: /path/to/database.db"
        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
    </div>
    <button
      id="testConnection"
      class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
    >
      测试连接
    </button>
    <button
      id="connect"
      class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
    >
      连接
    </button>
  </div>
  <div id="connectionStatus" class="mt-4 text-sm"></div>
</div>

<script>
  import { actions } from 'astro:actions';
  import { showStatus } from '../scripts/utils.ts';

  // DOM 元素
  const dbPathInput = document.getElementById('dbPath') as HTMLInputElement;
  const testConnectionBtn = document.getElementById('testConnection') as HTMLButtonElement;
  const connectBtn = document.getElementById('connect') as HTMLButtonElement;

  // 测试连接
  testConnectionBtn?.addEventListener('click', async () => {
    const filename = dbPathInput?.value.trim();
    if (!filename) {
      showStatus('请输入数据库文件路径', 'error');
      return;
    }

    try {
      testConnectionBtn.disabled = true;
      testConnectionBtn.textContent = '测试中...';

      const result = await actions.testConnection({
        type: 'sqlite',
        filename
      });

      if (result.data?.success && result.data?.connected) {
        showStatus('连接测试成功！', 'success');
      } else {
        showStatus(`连接测试失败: ${result.data?.error || '未知错误'}`, 'error');
      }
    } catch (error) {
      showStatus(`连接测试失败: ${(error as Error).message}`, 'error');
    } finally {
      testConnectionBtn.disabled = false;
      testConnectionBtn.textContent = '测试连接';
    }
  });

  // 连接数据库
  connectBtn?.addEventListener('click', async () => {
    const filename = dbPathInput?.value.trim();
    if (!filename) {
      showStatus('请输入数据库文件路径', 'error');
      return;
    }

    try {
      connectBtn.disabled = true;
      connectBtn.textContent = '连接中...';

      const result = await actions.connectToDatabase({
        type: 'sqlite',
        filename
      });

      if (result.data?.success) {
        showStatus('数据库连接成功！', 'success');
        // 触发自定义事件通知其他组件
        window.dispatchEvent(new CustomEvent('database-connected'));
      } else {
        showStatus(`连接失败: ${result.data?.error || '未知错误'}`, 'error');
      }
    } catch (error) {
      showStatus(`连接失败: ${(error as Error).message}`, 'error');
    } finally {
      connectBtn.disabled = false;
      connectBtn.textContent = '连接';
    }
  });

  // 设置默认数据库路径（用于测试）
  if (dbPathInput) {
    dbPathInput.value = './temp/test.db';
  }
</script>
